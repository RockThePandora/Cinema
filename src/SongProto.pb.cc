// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SongProto.proto

#include "SongProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SongDetailsCache {
namespace Structs {
PROTOBUF_CONSTEXPR SongDifficultyProto::SongDifficultyProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.characteristic_)*/0u
  , /*decltype(_impl_.difficulty_)*/0u
  , /*decltype(_impl_.starst100_)*/0u
  , /*decltype(_impl_.njst100_)*/0u
  , /*decltype(_impl_.bombs_)*/0u
  , /*decltype(_impl_.notes_)*/0u
  , /*decltype(_impl_.obstacles_)*/0u
  , /*decltype(_impl_.mods_)*/0u} {}
struct SongDifficultyProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SongDifficultyProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SongDifficultyProtoDefaultTypeInternal() {}
  union {
    SongDifficultyProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SongDifficultyProtoDefaultTypeInternal _SongDifficultyProto_default_instance_;
PROTOBUF_CONSTEXPR SongProto::SongProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.difficulties_)*/{}
  , /*decltype(_impl_.hashbytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.songname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.songauthorname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.levelauthorname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uploadername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bpm_)*/0
  , /*decltype(_impl_.downloadcount_)*/0u
  , /*decltype(_impl_.upvotes_)*/0u
  , /*decltype(_impl_.downvotes_)*/0u
  , /*decltype(_impl_.uploadtimeunix_)*/0u
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.songdurationseconds_)*/0u
  , /*decltype(_impl_.rankedchangeunix_)*/0u
  , /*decltype(_impl_.rankedstate_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SongProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SongProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SongProtoDefaultTypeInternal() {}
  union {
    SongProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SongProtoDefaultTypeInternal _SongProto_default_instance_;
PROTOBUF_CONSTEXPR SongProtoContainer::SongProtoContainer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.songs_)*/{}
  , /*decltype(_impl_.scrapeendedtimeunix_)*/uint64_t{0u}
  , /*decltype(_impl_.formatversion_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SongProtoContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SongProtoContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SongProtoContainerDefaultTypeInternal() {}
  union {
    SongProtoContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SongProtoContainerDefaultTypeInternal _SongProtoContainer_default_instance_;
}  // namespace Structs
}  // namespace SongDetailsCache
static ::_pb::Metadata file_level_metadata_SongProto_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SongProto_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SongProto_2eproto = nullptr;

const uint32_t TableStruct_SongProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficultyProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficultyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficultyProto, _impl_.characteristic_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficultyProto, _impl_.difficulty_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficultyProto, _impl_.starst100_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficultyProto, _impl_.njst100_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficultyProto, _impl_.bombs_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficultyProto, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficultyProto, _impl_.obstacles_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficultyProto, _impl_.mods_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.bpm_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.downloadcount_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.upvotes_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.downvotes_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.uploadtimeunix_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.rankedchangeunix_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.songdurationseconds_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.hashbytes_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.songname_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.songauthorname_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.levelauthorname_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.rankedstate_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.difficulties_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProto, _impl_.uploadername_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProtoContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProtoContainer, _impl_.formatversion_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProtoContainer, _impl_.scrapeendedtimeunix_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongProtoContainer, _impl_.songs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::SongDetailsCache::Structs::SongDifficultyProto)},
  { 22, -1, -1, sizeof(::SongDetailsCache::Structs::SongProto)},
  { 43, -1, -1, sizeof(::SongDetailsCache::Structs::SongProtoContainer)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SongDetailsCache::Structs::_SongDifficultyProto_default_instance_._instance,
  &::SongDetailsCache::Structs::_SongProto_default_instance_._instance,
  &::SongDetailsCache::Structs::_SongProtoContainer_default_instance_._instance,
};

const char descriptor_table_protodef_SongProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017SongProto.proto\022\030SongDetailsCache.Stru"
  "cts\"\336\001\n\023SongDifficultyProto\022\033\n\016character"
  "istic\030\001 \001(\rH\000\210\001\001\022\027\n\ndifficulty\030\002 \001(\rH\001\210\001"
  "\001\022\021\n\tstarsT100\030\004 \001(\r\022\017\n\007njsT100\030\006 \001(\r\022\r\n"
  "\005bombs\030\007 \001(\r\022\r\n\005notes\030\010 \001(\r\022\021\n\tobstacles"
  "\030\t \001(\r\022\021\n\004mods\030\n \001(\rH\002\210\001\001B\021\n\017_characteri"
  "sticB\r\n\013_difficultyB\007\n\005_mods\"\367\002\n\tSongPro"
  "to\022\013\n\003bpm\030\001 \001(\002\022\025\n\rdownloadCount\030\002 \001(\r\022\017"
  "\n\007upvotes\030\003 \001(\r\022\021\n\tdownvotes\030\004 \001(\r\022\026\n\016up"
  "loadTimeUnix\030\005 \001(\r\022\030\n\020rankedChangeUnix\030\016"
  " \001(\r\022\r\n\005mapId\030\006 \001(\r\022\033\n\023songDurationSecon"
  "ds\030\010 \001(\r\022\021\n\thashBytes\030\t \001(\014\022\020\n\010songName\030"
  "\n \001(\t\022\026\n\016songAuthorName\030\013 \001(\t\022\027\n\017levelAu"
  "thorName\030\014 \001(\t\022\023\n\013rankedState\030\017 \001(\r\022C\n\014d"
  "ifficulties\030\r \003(\0132-.SongDetailsCache.Str"
  "ucts.SongDifficultyProto\022\024\n\014uploaderName"
  "\030\020 \001(\t\"|\n\022SongProtoContainer\022\025\n\rformatVe"
  "rsion\030\001 \001(\r\022\033\n\023scrapeEndedTimeUnix\030\002 \001(\004"
  "\0222\n\005songs\030\004 \003(\0132#.SongDetailsCache.Struc"
  "ts.SongProtob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_SongProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SongProto_2eproto = {
    false, false, 780, descriptor_table_protodef_SongProto_2eproto,
    "SongProto.proto",
    &descriptor_table_SongProto_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_SongProto_2eproto::offsets,
    file_level_metadata_SongProto_2eproto, file_level_enum_descriptors_SongProto_2eproto,
    file_level_service_descriptors_SongProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SongProto_2eproto_getter() {
  return &descriptor_table_SongProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SongProto_2eproto(&descriptor_table_SongProto_2eproto);
namespace SongDetailsCache {
namespace Structs {

// ===================================================================

class SongDifficultyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SongDifficultyProto>()._impl_._has_bits_);
  static void set_has_characteristic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mods(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SongDifficultyProto::SongDifficultyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SongDetailsCache.Structs.SongDifficultyProto)
}
SongDifficultyProto::SongDifficultyProto(const SongDifficultyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SongDifficultyProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.characteristic_){}
    , decltype(_impl_.difficulty_){}
    , decltype(_impl_.starst100_){}
    , decltype(_impl_.njst100_){}
    , decltype(_impl_.bombs_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.obstacles_){}
    , decltype(_impl_.mods_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.characteristic_, &from._impl_.characteristic_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mods_) -
    reinterpret_cast<char*>(&_impl_.characteristic_)) + sizeof(_impl_.mods_));
  // @@protoc_insertion_point(copy_constructor:SongDetailsCache.Structs.SongDifficultyProto)
}

inline void SongDifficultyProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.characteristic_){0u}
    , decltype(_impl_.difficulty_){0u}
    , decltype(_impl_.starst100_){0u}
    , decltype(_impl_.njst100_){0u}
    , decltype(_impl_.bombs_){0u}
    , decltype(_impl_.notes_){0u}
    , decltype(_impl_.obstacles_){0u}
    , decltype(_impl_.mods_){0u}
  };
}

SongDifficultyProto::~SongDifficultyProto() {
  // @@protoc_insertion_point(destructor:SongDetailsCache.Structs.SongDifficultyProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SongDifficultyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SongDifficultyProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SongDifficultyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SongDetailsCache.Structs.SongDifficultyProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.characteristic_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.difficulty_) -
        reinterpret_cast<char*>(&_impl_.characteristic_)) + sizeof(_impl_.difficulty_));
  }
  ::memset(&_impl_.starst100_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.obstacles_) -
      reinterpret_cast<char*>(&_impl_.starst100_)) + sizeof(_impl_.obstacles_));
  _impl_.mods_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SongDifficultyProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 characteristic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_characteristic(&has_bits);
          _impl_.characteristic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 difficulty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_difficulty(&has_bits);
          _impl_.difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 starsT100 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.starst100_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 njsT100 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.njst100_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bombs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.bombs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 notes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.notes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 obstacles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.obstacles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mods = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_mods(&has_bits);
          _impl_.mods_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SongDifficultyProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SongDetailsCache.Structs.SongDifficultyProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 characteristic = 1;
  if (_internal_has_characteristic()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_characteristic(), target);
  }

  // optional uint32 difficulty = 2;
  if (_internal_has_difficulty()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_difficulty(), target);
  }

  // uint32 starsT100 = 4;
  if (this->_internal_starst100() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_starst100(), target);
  }

  // uint32 njsT100 = 6;
  if (this->_internal_njst100() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_njst100(), target);
  }

  // uint32 bombs = 7;
  if (this->_internal_bombs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bombs(), target);
  }

  // uint32 notes = 8;
  if (this->_internal_notes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_notes(), target);
  }

  // uint32 obstacles = 9;
  if (this->_internal_obstacles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_obstacles(), target);
  }

  // optional uint32 mods = 10;
  if (_internal_has_mods()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_mods(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SongDetailsCache.Structs.SongDifficultyProto)
  return target;
}

size_t SongDifficultyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SongDetailsCache.Structs.SongDifficultyProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 characteristic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_characteristic());
    }

    // optional uint32 difficulty = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_difficulty());
    }

  }
  // uint32 starsT100 = 4;
  if (this->_internal_starst100() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_starst100());
  }

  // uint32 njsT100 = 6;
  if (this->_internal_njst100() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_njst100());
  }

  // uint32 bombs = 7;
  if (this->_internal_bombs() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bombs());
  }

  // uint32 notes = 8;
  if (this->_internal_notes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_notes());
  }

  // uint32 obstacles = 9;
  if (this->_internal_obstacles() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_obstacles());
  }

  // optional uint32 mods = 10;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mods());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SongDifficultyProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SongDifficultyProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SongDifficultyProto::GetClassData() const { return &_class_data_; }


void SongDifficultyProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SongDifficultyProto*>(&to_msg);
  auto& from = static_cast<const SongDifficultyProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SongDetailsCache.Structs.SongDifficultyProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.characteristic_ = from._impl_.characteristic_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.difficulty_ = from._impl_.difficulty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_starst100() != 0) {
    _this->_internal_set_starst100(from._internal_starst100());
  }
  if (from._internal_njst100() != 0) {
    _this->_internal_set_njst100(from._internal_njst100());
  }
  if (from._internal_bombs() != 0) {
    _this->_internal_set_bombs(from._internal_bombs());
  }
  if (from._internal_notes() != 0) {
    _this->_internal_set_notes(from._internal_notes());
  }
  if (from._internal_obstacles() != 0) {
    _this->_internal_set_obstacles(from._internal_obstacles());
  }
  if (cached_has_bits & 0x00000004u) {
    _this->_internal_set_mods(from._internal_mods());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SongDifficultyProto::CopyFrom(const SongDifficultyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SongDetailsCache.Structs.SongDifficultyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongDifficultyProto::IsInitialized() const {
  return true;
}

void SongDifficultyProto::InternalSwap(SongDifficultyProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SongDifficultyProto, _impl_.mods_)
      + sizeof(SongDifficultyProto::_impl_.mods_)
      - PROTOBUF_FIELD_OFFSET(SongDifficultyProto, _impl_.characteristic_)>(
          reinterpret_cast<char*>(&_impl_.characteristic_),
          reinterpret_cast<char*>(&other->_impl_.characteristic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SongDifficultyProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SongProto_2eproto_getter, &descriptor_table_SongProto_2eproto_once,
      file_level_metadata_SongProto_2eproto[0]);
}

// ===================================================================

class SongProto::_Internal {
 public:
};

SongProto::SongProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SongDetailsCache.Structs.SongProto)
}
SongProto::SongProto(const SongProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SongProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.difficulties_){from._impl_.difficulties_}
    , decltype(_impl_.hashbytes_){}
    , decltype(_impl_.songname_){}
    , decltype(_impl_.songauthorname_){}
    , decltype(_impl_.levelauthorname_){}
    , decltype(_impl_.uploadername_){}
    , decltype(_impl_.bpm_){}
    , decltype(_impl_.downloadcount_){}
    , decltype(_impl_.upvotes_){}
    , decltype(_impl_.downvotes_){}
    , decltype(_impl_.uploadtimeunix_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.songdurationseconds_){}
    , decltype(_impl_.rankedchangeunix_){}
    , decltype(_impl_.rankedstate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hashbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hashbytes().empty()) {
    _this->_impl_.hashbytes_.Set(from._internal_hashbytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.songname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.songname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_songname().empty()) {
    _this->_impl_.songname_.Set(from._internal_songname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.songauthorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.songauthorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_songauthorname().empty()) {
    _this->_impl_.songauthorname_.Set(from._internal_songauthorname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.levelauthorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.levelauthorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_levelauthorname().empty()) {
    _this->_impl_.levelauthorname_.Set(from._internal_levelauthorname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uploadername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploadername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uploadername().empty()) {
    _this->_impl_.uploadername_.Set(from._internal_uploadername(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bpm_, &from._impl_.bpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rankedstate_) -
    reinterpret_cast<char*>(&_impl_.bpm_)) + sizeof(_impl_.rankedstate_));
  // @@protoc_insertion_point(copy_constructor:SongDetailsCache.Structs.SongProto)
}

inline void SongProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.difficulties_){arena}
    , decltype(_impl_.hashbytes_){}
    , decltype(_impl_.songname_){}
    , decltype(_impl_.songauthorname_){}
    , decltype(_impl_.levelauthorname_){}
    , decltype(_impl_.uploadername_){}
    , decltype(_impl_.bpm_){0}
    , decltype(_impl_.downloadcount_){0u}
    , decltype(_impl_.upvotes_){0u}
    , decltype(_impl_.downvotes_){0u}
    , decltype(_impl_.uploadtimeunix_){0u}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.songdurationseconds_){0u}
    , decltype(_impl_.rankedchangeunix_){0u}
    , decltype(_impl_.rankedstate_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hashbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.songname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.songname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.songauthorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.songauthorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.levelauthorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.levelauthorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uploadername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploadername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SongProto::~SongProto() {
  // @@protoc_insertion_point(destructor:SongDetailsCache.Structs.SongProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SongProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.difficulties_.~RepeatedPtrField();
  _impl_.hashbytes_.Destroy();
  _impl_.songname_.Destroy();
  _impl_.songauthorname_.Destroy();
  _impl_.levelauthorname_.Destroy();
  _impl_.uploadername_.Destroy();
}

void SongProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SongProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SongDetailsCache.Structs.SongProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.difficulties_.Clear();
  _impl_.hashbytes_.ClearToEmpty();
  _impl_.songname_.ClearToEmpty();
  _impl_.songauthorname_.ClearToEmpty();
  _impl_.levelauthorname_.ClearToEmpty();
  _impl_.uploadername_.ClearToEmpty();
  ::memset(&_impl_.bpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rankedstate_) -
      reinterpret_cast<char*>(&_impl_.bpm_)) + sizeof(_impl_.rankedstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SongProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float bpm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.bpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 downloadCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.downloadcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 upvotes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.upvotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 downvotes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.downvotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uploadTimeUnix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.uploadtimeunix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mapId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 songDurationSeconds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.songdurationseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hashBytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_hashbytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string songName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_songname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SongDetailsCache.Structs.SongProto.songName"));
        } else
          goto handle_unusual;
        continue;
      // string songAuthorName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_songauthorname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SongDetailsCache.Structs.SongProto.songAuthorName"));
        } else
          goto handle_unusual;
        continue;
      // string levelAuthorName = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_levelauthorname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SongDetailsCache.Structs.SongProto.levelAuthorName"));
        } else
          goto handle_unusual;
        continue;
      // repeated .SongDetailsCache.Structs.SongDifficultyProto difficulties = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_difficulties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 rankedChangeUnix = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.rankedchangeunix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rankedState = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.rankedstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uploaderName = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_uploadername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SongDetailsCache.Structs.SongProto.uploaderName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SongProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SongDetailsCache.Structs.SongProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float bpm = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bpm = this->_internal_bpm();
  uint32_t raw_bpm;
  memcpy(&raw_bpm, &tmp_bpm, sizeof(tmp_bpm));
  if (raw_bpm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_bpm(), target);
  }

  // uint32 downloadCount = 2;
  if (this->_internal_downloadcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_downloadcount(), target);
  }

  // uint32 upvotes = 3;
  if (this->_internal_upvotes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_upvotes(), target);
  }

  // uint32 downvotes = 4;
  if (this->_internal_downvotes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_downvotes(), target);
  }

  // uint32 uploadTimeUnix = 5;
  if (this->_internal_uploadtimeunix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uploadtimeunix(), target);
  }

  // uint32 mapId = 6;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_mapid(), target);
  }

  // uint32 songDurationSeconds = 8;
  if (this->_internal_songdurationseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_songdurationseconds(), target);
  }

  // bytes hashBytes = 9;
  if (!this->_internal_hashbytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_hashbytes(), target);
  }

  // string songName = 10;
  if (!this->_internal_songname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_songname().data(), static_cast<int>(this->_internal_songname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SongDetailsCache.Structs.SongProto.songName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_songname(), target);
  }

  // string songAuthorName = 11;
  if (!this->_internal_songauthorname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_songauthorname().data(), static_cast<int>(this->_internal_songauthorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SongDetailsCache.Structs.SongProto.songAuthorName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_songauthorname(), target);
  }

  // string levelAuthorName = 12;
  if (!this->_internal_levelauthorname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_levelauthorname().data(), static_cast<int>(this->_internal_levelauthorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SongDetailsCache.Structs.SongProto.levelAuthorName");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_levelauthorname(), target);
  }

  // repeated .SongDetailsCache.Structs.SongDifficultyProto difficulties = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_difficulties_size()); i < n; i++) {
    const auto& repfield = this->_internal_difficulties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 rankedChangeUnix = 14;
  if (this->_internal_rankedchangeunix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rankedchangeunix(), target);
  }

  // uint32 rankedState = 15;
  if (this->_internal_rankedstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_rankedstate(), target);
  }

  // string uploaderName = 16;
  if (!this->_internal_uploadername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uploadername().data(), static_cast<int>(this->_internal_uploadername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SongDetailsCache.Structs.SongProto.uploaderName");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_uploadername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SongDetailsCache.Structs.SongProto)
  return target;
}

size_t SongProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SongDetailsCache.Structs.SongProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SongDetailsCache.Structs.SongDifficultyProto difficulties = 13;
  total_size += 1UL * this->_internal_difficulties_size();
  for (const auto& msg : this->_impl_.difficulties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes hashBytes = 9;
  if (!this->_internal_hashbytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hashbytes());
  }

  // string songName = 10;
  if (!this->_internal_songname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_songname());
  }

  // string songAuthorName = 11;
  if (!this->_internal_songauthorname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_songauthorname());
  }

  // string levelAuthorName = 12;
  if (!this->_internal_levelauthorname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_levelauthorname());
  }

  // string uploaderName = 16;
  if (!this->_internal_uploadername().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uploadername());
  }

  // float bpm = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bpm = this->_internal_bpm();
  uint32_t raw_bpm;
  memcpy(&raw_bpm, &tmp_bpm, sizeof(tmp_bpm));
  if (raw_bpm != 0) {
    total_size += 1 + 4;
  }

  // uint32 downloadCount = 2;
  if (this->_internal_downloadcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_downloadcount());
  }

  // uint32 upvotes = 3;
  if (this->_internal_upvotes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_upvotes());
  }

  // uint32 downvotes = 4;
  if (this->_internal_downvotes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_downvotes());
  }

  // uint32 uploadTimeUnix = 5;
  if (this->_internal_uploadtimeunix() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uploadtimeunix());
  }

  // uint32 mapId = 6;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 songDurationSeconds = 8;
  if (this->_internal_songdurationseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_songdurationseconds());
  }

  // uint32 rankedChangeUnix = 14;
  if (this->_internal_rankedchangeunix() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rankedchangeunix());
  }

  // uint32 rankedState = 15;
  if (this->_internal_rankedstate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rankedstate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SongProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SongProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SongProto::GetClassData() const { return &_class_data_; }


void SongProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SongProto*>(&to_msg);
  auto& from = static_cast<const SongProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SongDetailsCache.Structs.SongProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.difficulties_.MergeFrom(from._impl_.difficulties_);
  if (!from._internal_hashbytes().empty()) {
    _this->_internal_set_hashbytes(from._internal_hashbytes());
  }
  if (!from._internal_songname().empty()) {
    _this->_internal_set_songname(from._internal_songname());
  }
  if (!from._internal_songauthorname().empty()) {
    _this->_internal_set_songauthorname(from._internal_songauthorname());
  }
  if (!from._internal_levelauthorname().empty()) {
    _this->_internal_set_levelauthorname(from._internal_levelauthorname());
  }
  if (!from._internal_uploadername().empty()) {
    _this->_internal_set_uploadername(from._internal_uploadername());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bpm = from._internal_bpm();
  uint32_t raw_bpm;
  memcpy(&raw_bpm, &tmp_bpm, sizeof(tmp_bpm));
  if (raw_bpm != 0) {
    _this->_internal_set_bpm(from._internal_bpm());
  }
  if (from._internal_downloadcount() != 0) {
    _this->_internal_set_downloadcount(from._internal_downloadcount());
  }
  if (from._internal_upvotes() != 0) {
    _this->_internal_set_upvotes(from._internal_upvotes());
  }
  if (from._internal_downvotes() != 0) {
    _this->_internal_set_downvotes(from._internal_downvotes());
  }
  if (from._internal_uploadtimeunix() != 0) {
    _this->_internal_set_uploadtimeunix(from._internal_uploadtimeunix());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_songdurationseconds() != 0) {
    _this->_internal_set_songdurationseconds(from._internal_songdurationseconds());
  }
  if (from._internal_rankedchangeunix() != 0) {
    _this->_internal_set_rankedchangeunix(from._internal_rankedchangeunix());
  }
  if (from._internal_rankedstate() != 0) {
    _this->_internal_set_rankedstate(from._internal_rankedstate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SongProto::CopyFrom(const SongProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SongDetailsCache.Structs.SongProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongProto::IsInitialized() const {
  return true;
}

void SongProto::InternalSwap(SongProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.difficulties_.InternalSwap(&other->_impl_.difficulties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hashbytes_, lhs_arena,
      &other->_impl_.hashbytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.songname_, lhs_arena,
      &other->_impl_.songname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.songauthorname_, lhs_arena,
      &other->_impl_.songauthorname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.levelauthorname_, lhs_arena,
      &other->_impl_.levelauthorname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uploadername_, lhs_arena,
      &other->_impl_.uploadername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SongProto, _impl_.rankedstate_)
      + sizeof(SongProto::_impl_.rankedstate_)
      - PROTOBUF_FIELD_OFFSET(SongProto, _impl_.bpm_)>(
          reinterpret_cast<char*>(&_impl_.bpm_),
          reinterpret_cast<char*>(&other->_impl_.bpm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SongProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SongProto_2eproto_getter, &descriptor_table_SongProto_2eproto_once,
      file_level_metadata_SongProto_2eproto[1]);
}

// ===================================================================

class SongProtoContainer::_Internal {
 public:
};

SongProtoContainer::SongProtoContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SongDetailsCache.Structs.SongProtoContainer)
}
SongProtoContainer::SongProtoContainer(const SongProtoContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SongProtoContainer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.songs_){from._impl_.songs_}
    , decltype(_impl_.scrapeendedtimeunix_){}
    , decltype(_impl_.formatversion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scrapeendedtimeunix_, &from._impl_.scrapeendedtimeunix_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.formatversion_) -
    reinterpret_cast<char*>(&_impl_.scrapeendedtimeunix_)) + sizeof(_impl_.formatversion_));
  // @@protoc_insertion_point(copy_constructor:SongDetailsCache.Structs.SongProtoContainer)
}

inline void SongProtoContainer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.songs_){arena}
    , decltype(_impl_.scrapeendedtimeunix_){uint64_t{0u}}
    , decltype(_impl_.formatversion_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SongProtoContainer::~SongProtoContainer() {
  // @@protoc_insertion_point(destructor:SongDetailsCache.Structs.SongProtoContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SongProtoContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.songs_.~RepeatedPtrField();
}

void SongProtoContainer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SongProtoContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:SongDetailsCache.Structs.SongProtoContainer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.songs_.Clear();
  ::memset(&_impl_.scrapeendedtimeunix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.formatversion_) -
      reinterpret_cast<char*>(&_impl_.scrapeendedtimeunix_)) + sizeof(_impl_.formatversion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SongProtoContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 formatVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.formatversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 scrapeEndedTimeUnix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scrapeendedtimeunix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SongDetailsCache.Structs.SongProto songs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_songs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SongProtoContainer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SongDetailsCache.Structs.SongProtoContainer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 formatVersion = 1;
  if (this->_internal_formatversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_formatversion(), target);
  }

  // uint64 scrapeEndedTimeUnix = 2;
  if (this->_internal_scrapeendedtimeunix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_scrapeendedtimeunix(), target);
  }

  // repeated .SongDetailsCache.Structs.SongProto songs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_songs_size()); i < n; i++) {
    const auto& repfield = this->_internal_songs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SongDetailsCache.Structs.SongProtoContainer)
  return target;
}

size_t SongProtoContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SongDetailsCache.Structs.SongProtoContainer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SongDetailsCache.Structs.SongProto songs = 4;
  total_size += 1UL * this->_internal_songs_size();
  for (const auto& msg : this->_impl_.songs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 scrapeEndedTimeUnix = 2;
  if (this->_internal_scrapeendedtimeunix() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scrapeendedtimeunix());
  }

  // uint32 formatVersion = 1;
  if (this->_internal_formatversion() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formatversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SongProtoContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SongProtoContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SongProtoContainer::GetClassData() const { return &_class_data_; }


void SongProtoContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SongProtoContainer*>(&to_msg);
  auto& from = static_cast<const SongProtoContainer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SongDetailsCache.Structs.SongProtoContainer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.songs_.MergeFrom(from._impl_.songs_);
  if (from._internal_scrapeendedtimeunix() != 0) {
    _this->_internal_set_scrapeendedtimeunix(from._internal_scrapeendedtimeunix());
  }
  if (from._internal_formatversion() != 0) {
    _this->_internal_set_formatversion(from._internal_formatversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SongProtoContainer::CopyFrom(const SongProtoContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SongDetailsCache.Structs.SongProtoContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongProtoContainer::IsInitialized() const {
  return true;
}

void SongProtoContainer::InternalSwap(SongProtoContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.songs_.InternalSwap(&other->_impl_.songs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SongProtoContainer, _impl_.formatversion_)
      + sizeof(SongProtoContainer::_impl_.formatversion_)
      - PROTOBUF_FIELD_OFFSET(SongProtoContainer, _impl_.scrapeendedtimeunix_)>(
          reinterpret_cast<char*>(&_impl_.scrapeendedtimeunix_),
          reinterpret_cast<char*>(&other->_impl_.scrapeendedtimeunix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SongProtoContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SongProto_2eproto_getter, &descriptor_table_SongProto_2eproto_once,
      file_level_metadata_SongProto_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Structs
}  // namespace SongDetailsCache
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SongDetailsCache::Structs::SongDifficultyProto*
Arena::CreateMaybeMessage< ::SongDetailsCache::Structs::SongDifficultyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SongDetailsCache::Structs::SongDifficultyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::SongDetailsCache::Structs::SongProto*
Arena::CreateMaybeMessage< ::SongDetailsCache::Structs::SongProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SongDetailsCache::Structs::SongProto >(arena);
}
template<> PROTOBUF_NOINLINE ::SongDetailsCache::Structs::SongProtoContainer*
Arena::CreateMaybeMessage< ::SongDetailsCache::Structs::SongProtoContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SongDetailsCache::Structs::SongProtoContainer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
