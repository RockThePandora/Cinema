// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SongProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SongProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SongProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SongProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SongProto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SongProto_2eproto;
namespace SongDetailsCache {
namespace Structs {
class SongDifficultyProto;
struct SongDifficultyProtoDefaultTypeInternal;
extern SongDifficultyProtoDefaultTypeInternal _SongDifficultyProto_default_instance_;
class SongProto;
struct SongProtoDefaultTypeInternal;
extern SongProtoDefaultTypeInternal _SongProto_default_instance_;
class SongProtoContainer;
struct SongProtoContainerDefaultTypeInternal;
extern SongProtoContainerDefaultTypeInternal _SongProtoContainer_default_instance_;
}  // namespace Structs
}  // namespace SongDetailsCache
PROTOBUF_NAMESPACE_OPEN
template<> ::SongDetailsCache::Structs::SongDifficultyProto* Arena::CreateMaybeMessage<::SongDetailsCache::Structs::SongDifficultyProto>(Arena*);
template<> ::SongDetailsCache::Structs::SongProto* Arena::CreateMaybeMessage<::SongDetailsCache::Structs::SongProto>(Arena*);
template<> ::SongDetailsCache::Structs::SongProtoContainer* Arena::CreateMaybeMessage<::SongDetailsCache::Structs::SongProtoContainer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SongDetailsCache {
namespace Structs {

// ===================================================================

class SongDifficultyProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SongDetailsCache.Structs.SongDifficultyProto) */ {
 public:
  inline SongDifficultyProto() : SongDifficultyProto(nullptr) {}
  ~SongDifficultyProto() override;
  explicit PROTOBUF_CONSTEXPR SongDifficultyProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SongDifficultyProto(const SongDifficultyProto& from);
  SongDifficultyProto(SongDifficultyProto&& from) noexcept
    : SongDifficultyProto() {
    *this = ::std::move(from);
  }

  inline SongDifficultyProto& operator=(const SongDifficultyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SongDifficultyProto& operator=(SongDifficultyProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SongDifficultyProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SongDifficultyProto* internal_default_instance() {
    return reinterpret_cast<const SongDifficultyProto*>(
               &_SongDifficultyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SongDifficultyProto& a, SongDifficultyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SongDifficultyProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SongDifficultyProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SongDifficultyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SongDifficultyProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SongDifficultyProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SongDifficultyProto& from) {
    SongDifficultyProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SongDifficultyProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SongDetailsCache.Structs.SongDifficultyProto";
  }
  protected:
  explicit SongDifficultyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacteristicFieldNumber = 1,
    kDifficultyFieldNumber = 2,
    kStarsT100FieldNumber = 4,
    kNjsT100FieldNumber = 6,
    kBombsFieldNumber = 7,
    kNotesFieldNumber = 8,
    kObstaclesFieldNumber = 9,
    kModsFieldNumber = 10,
  };
  // optional uint32 characteristic = 1;
  bool has_characteristic() const;
  private:
  bool _internal_has_characteristic() const;
  public:
  void clear_characteristic();
  uint32_t characteristic() const;
  void set_characteristic(uint32_t value);
  private:
  uint32_t _internal_characteristic() const;
  void _internal_set_characteristic(uint32_t value);
  public:

  // optional uint32 difficulty = 2;
  bool has_difficulty() const;
  private:
  bool _internal_has_difficulty() const;
  public:
  void clear_difficulty();
  uint32_t difficulty() const;
  void set_difficulty(uint32_t value);
  private:
  uint32_t _internal_difficulty() const;
  void _internal_set_difficulty(uint32_t value);
  public:

  // uint32 starsT100 = 4;
  void clear_starst100();
  uint32_t starst100() const;
  void set_starst100(uint32_t value);
  private:
  uint32_t _internal_starst100() const;
  void _internal_set_starst100(uint32_t value);
  public:

  // uint32 njsT100 = 6;
  void clear_njst100();
  uint32_t njst100() const;
  void set_njst100(uint32_t value);
  private:
  uint32_t _internal_njst100() const;
  void _internal_set_njst100(uint32_t value);
  public:

  // uint32 bombs = 7;
  void clear_bombs();
  uint32_t bombs() const;
  void set_bombs(uint32_t value);
  private:
  uint32_t _internal_bombs() const;
  void _internal_set_bombs(uint32_t value);
  public:

  // uint32 notes = 8;
  void clear_notes();
  uint32_t notes() const;
  void set_notes(uint32_t value);
  private:
  uint32_t _internal_notes() const;
  void _internal_set_notes(uint32_t value);
  public:

  // uint32 obstacles = 9;
  void clear_obstacles();
  uint32_t obstacles() const;
  void set_obstacles(uint32_t value);
  private:
  uint32_t _internal_obstacles() const;
  void _internal_set_obstacles(uint32_t value);
  public:

  // optional uint32 mods = 10;
  bool has_mods() const;
  private:
  bool _internal_has_mods() const;
  public:
  void clear_mods();
  uint32_t mods() const;
  void set_mods(uint32_t value);
  private:
  uint32_t _internal_mods() const;
  void _internal_set_mods(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SongDetailsCache.Structs.SongDifficultyProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t characteristic_;
    uint32_t difficulty_;
    uint32_t starst100_;
    uint32_t njst100_;
    uint32_t bombs_;
    uint32_t notes_;
    uint32_t obstacles_;
    uint32_t mods_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SongProto_2eproto;
};
// -------------------------------------------------------------------

class SongProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SongDetailsCache.Structs.SongProto) */ {
 public:
  inline SongProto() : SongProto(nullptr) {}
  ~SongProto() override;
  explicit PROTOBUF_CONSTEXPR SongProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SongProto(const SongProto& from);
  SongProto(SongProto&& from) noexcept
    : SongProto() {
    *this = ::std::move(from);
  }

  inline SongProto& operator=(const SongProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SongProto& operator=(SongProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SongProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SongProto* internal_default_instance() {
    return reinterpret_cast<const SongProto*>(
               &_SongProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SongProto& a, SongProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SongProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SongProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SongProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SongProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SongProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SongProto& from) {
    SongProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SongProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SongDetailsCache.Structs.SongProto";
  }
  protected:
  explicit SongProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDifficultiesFieldNumber = 13,
    kHashBytesFieldNumber = 9,
    kSongNameFieldNumber = 10,
    kSongAuthorNameFieldNumber = 11,
    kLevelAuthorNameFieldNumber = 12,
    kUploaderNameFieldNumber = 16,
    kBpmFieldNumber = 1,
    kDownloadCountFieldNumber = 2,
    kUpvotesFieldNumber = 3,
    kDownvotesFieldNumber = 4,
    kUploadTimeUnixFieldNumber = 5,
    kMapIdFieldNumber = 6,
    kSongDurationSecondsFieldNumber = 8,
    kRankedChangeUnixFieldNumber = 14,
    kRankedStateFieldNumber = 15,
  };
  // repeated .SongDetailsCache.Structs.SongDifficultyProto difficulties = 13;
  int difficulties_size() const;
  private:
  int _internal_difficulties_size() const;
  public:
  void clear_difficulties();
  ::SongDetailsCache::Structs::SongDifficultyProto* mutable_difficulties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SongDetailsCache::Structs::SongDifficultyProto >*
      mutable_difficulties();
  private:
  const ::SongDetailsCache::Structs::SongDifficultyProto& _internal_difficulties(int index) const;
  ::SongDetailsCache::Structs::SongDifficultyProto* _internal_add_difficulties();
  public:
  const ::SongDetailsCache::Structs::SongDifficultyProto& difficulties(int index) const;
  ::SongDetailsCache::Structs::SongDifficultyProto* add_difficulties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SongDetailsCache::Structs::SongDifficultyProto >&
      difficulties() const;

  // bytes hashBytes = 9;
  void clear_hashbytes();
  const std::string& hashbytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hashbytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hashbytes();
  PROTOBUF_NODISCARD std::string* release_hashbytes();
  void set_allocated_hashbytes(std::string* hashbytes);
  private:
  const std::string& _internal_hashbytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashbytes(const std::string& value);
  std::string* _internal_mutable_hashbytes();
  public:

  // string songName = 10;
  void clear_songname();
  const std::string& songname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_songname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_songname();
  PROTOBUF_NODISCARD std::string* release_songname();
  void set_allocated_songname(std::string* songname);
  private:
  const std::string& _internal_songname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_songname(const std::string& value);
  std::string* _internal_mutable_songname();
  public:

  // string songAuthorName = 11;
  void clear_songauthorname();
  const std::string& songauthorname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_songauthorname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_songauthorname();
  PROTOBUF_NODISCARD std::string* release_songauthorname();
  void set_allocated_songauthorname(std::string* songauthorname);
  private:
  const std::string& _internal_songauthorname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_songauthorname(const std::string& value);
  std::string* _internal_mutable_songauthorname();
  public:

  // string levelAuthorName = 12;
  void clear_levelauthorname();
  const std::string& levelauthorname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_levelauthorname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_levelauthorname();
  PROTOBUF_NODISCARD std::string* release_levelauthorname();
  void set_allocated_levelauthorname(std::string* levelauthorname);
  private:
  const std::string& _internal_levelauthorname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_levelauthorname(const std::string& value);
  std::string* _internal_mutable_levelauthorname();
  public:

  // string uploaderName = 16;
  void clear_uploadername();
  const std::string& uploadername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uploadername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uploadername();
  PROTOBUF_NODISCARD std::string* release_uploadername();
  void set_allocated_uploadername(std::string* uploadername);
  private:
  const std::string& _internal_uploadername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uploadername(const std::string& value);
  std::string* _internal_mutable_uploadername();
  public:

  // float bpm = 1;
  void clear_bpm();
  float bpm() const;
  void set_bpm(float value);
  private:
  float _internal_bpm() const;
  void _internal_set_bpm(float value);
  public:

  // uint32 downloadCount = 2;
  void clear_downloadcount();
  uint32_t downloadcount() const;
  void set_downloadcount(uint32_t value);
  private:
  uint32_t _internal_downloadcount() const;
  void _internal_set_downloadcount(uint32_t value);
  public:

  // uint32 upvotes = 3;
  void clear_upvotes();
  uint32_t upvotes() const;
  void set_upvotes(uint32_t value);
  private:
  uint32_t _internal_upvotes() const;
  void _internal_set_upvotes(uint32_t value);
  public:

  // uint32 downvotes = 4;
  void clear_downvotes();
  uint32_t downvotes() const;
  void set_downvotes(uint32_t value);
  private:
  uint32_t _internal_downvotes() const;
  void _internal_set_downvotes(uint32_t value);
  public:

  // uint32 uploadTimeUnix = 5;
  void clear_uploadtimeunix();
  uint32_t uploadtimeunix() const;
  void set_uploadtimeunix(uint32_t value);
  private:
  uint32_t _internal_uploadtimeunix() const;
  void _internal_set_uploadtimeunix(uint32_t value);
  public:

  // uint32 mapId = 6;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // uint32 songDurationSeconds = 8;
  void clear_songdurationseconds();
  uint32_t songdurationseconds() const;
  void set_songdurationseconds(uint32_t value);
  private:
  uint32_t _internal_songdurationseconds() const;
  void _internal_set_songdurationseconds(uint32_t value);
  public:

  // uint32 rankedChangeUnix = 14;
  void clear_rankedchangeunix();
  uint32_t rankedchangeunix() const;
  void set_rankedchangeunix(uint32_t value);
  private:
  uint32_t _internal_rankedchangeunix() const;
  void _internal_set_rankedchangeunix(uint32_t value);
  public:

  // uint32 rankedState = 15;
  void clear_rankedstate();
  uint32_t rankedstate() const;
  void set_rankedstate(uint32_t value);
  private:
  uint32_t _internal_rankedstate() const;
  void _internal_set_rankedstate(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SongDetailsCache.Structs.SongProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SongDetailsCache::Structs::SongDifficultyProto > difficulties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashbytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr songname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr songauthorname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr levelauthorname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadername_;
    float bpm_;
    uint32_t downloadcount_;
    uint32_t upvotes_;
    uint32_t downvotes_;
    uint32_t uploadtimeunix_;
    uint32_t mapid_;
    uint32_t songdurationseconds_;
    uint32_t rankedchangeunix_;
    uint32_t rankedstate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SongProto_2eproto;
};
// -------------------------------------------------------------------

class SongProtoContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SongDetailsCache.Structs.SongProtoContainer) */ {
 public:
  inline SongProtoContainer() : SongProtoContainer(nullptr) {}
  ~SongProtoContainer() override;
  explicit PROTOBUF_CONSTEXPR SongProtoContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SongProtoContainer(const SongProtoContainer& from);
  SongProtoContainer(SongProtoContainer&& from) noexcept
    : SongProtoContainer() {
    *this = ::std::move(from);
  }

  inline SongProtoContainer& operator=(const SongProtoContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SongProtoContainer& operator=(SongProtoContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SongProtoContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const SongProtoContainer* internal_default_instance() {
    return reinterpret_cast<const SongProtoContainer*>(
               &_SongProtoContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SongProtoContainer& a, SongProtoContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(SongProtoContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SongProtoContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SongProtoContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SongProtoContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SongProtoContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SongProtoContainer& from) {
    SongProtoContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SongProtoContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SongDetailsCache.Structs.SongProtoContainer";
  }
  protected:
  explicit SongProtoContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSongsFieldNumber = 4,
    kScrapeEndedTimeUnixFieldNumber = 2,
    kFormatVersionFieldNumber = 1,
  };
  // repeated .SongDetailsCache.Structs.SongProto songs = 4;
  int songs_size() const;
  private:
  int _internal_songs_size() const;
  public:
  void clear_songs();
  ::SongDetailsCache::Structs::SongProto* mutable_songs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SongDetailsCache::Structs::SongProto >*
      mutable_songs();
  private:
  const ::SongDetailsCache::Structs::SongProto& _internal_songs(int index) const;
  ::SongDetailsCache::Structs::SongProto* _internal_add_songs();
  public:
  const ::SongDetailsCache::Structs::SongProto& songs(int index) const;
  ::SongDetailsCache::Structs::SongProto* add_songs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SongDetailsCache::Structs::SongProto >&
      songs() const;

  // uint64 scrapeEndedTimeUnix = 2;
  void clear_scrapeendedtimeunix();
  uint64_t scrapeendedtimeunix() const;
  void set_scrapeendedtimeunix(uint64_t value);
  private:
  uint64_t _internal_scrapeendedtimeunix() const;
  void _internal_set_scrapeendedtimeunix(uint64_t value);
  public:

  // uint32 formatVersion = 1;
  void clear_formatversion();
  uint32_t formatversion() const;
  void set_formatversion(uint32_t value);
  private:
  uint32_t _internal_formatversion() const;
  void _internal_set_formatversion(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SongDetailsCache.Structs.SongProtoContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SongDetailsCache::Structs::SongProto > songs_;
    uint64_t scrapeendedtimeunix_;
    uint32_t formatversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SongProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SongDifficultyProto

// optional uint32 characteristic = 1;
inline bool SongDifficultyProto::_internal_has_characteristic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SongDifficultyProto::has_characteristic() const {
  return _internal_has_characteristic();
}
inline void SongDifficultyProto::clear_characteristic() {
  _impl_.characteristic_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SongDifficultyProto::_internal_characteristic() const {
  return _impl_.characteristic_;
}
inline uint32_t SongDifficultyProto::characteristic() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongDifficultyProto.characteristic)
  return _internal_characteristic();
}
inline void SongDifficultyProto::_internal_set_characteristic(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.characteristic_ = value;
}
inline void SongDifficultyProto::set_characteristic(uint32_t value) {
  _internal_set_characteristic(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongDifficultyProto.characteristic)
}

// optional uint32 difficulty = 2;
inline bool SongDifficultyProto::_internal_has_difficulty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SongDifficultyProto::has_difficulty() const {
  return _internal_has_difficulty();
}
inline void SongDifficultyProto::clear_difficulty() {
  _impl_.difficulty_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t SongDifficultyProto::_internal_difficulty() const {
  return _impl_.difficulty_;
}
inline uint32_t SongDifficultyProto::difficulty() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongDifficultyProto.difficulty)
  return _internal_difficulty();
}
inline void SongDifficultyProto::_internal_set_difficulty(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.difficulty_ = value;
}
inline void SongDifficultyProto::set_difficulty(uint32_t value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongDifficultyProto.difficulty)
}

// uint32 starsT100 = 4;
inline void SongDifficultyProto::clear_starst100() {
  _impl_.starst100_ = 0u;
}
inline uint32_t SongDifficultyProto::_internal_starst100() const {
  return _impl_.starst100_;
}
inline uint32_t SongDifficultyProto::starst100() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongDifficultyProto.starsT100)
  return _internal_starst100();
}
inline void SongDifficultyProto::_internal_set_starst100(uint32_t value) {
  
  _impl_.starst100_ = value;
}
inline void SongDifficultyProto::set_starst100(uint32_t value) {
  _internal_set_starst100(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongDifficultyProto.starsT100)
}

// uint32 njsT100 = 6;
inline void SongDifficultyProto::clear_njst100() {
  _impl_.njst100_ = 0u;
}
inline uint32_t SongDifficultyProto::_internal_njst100() const {
  return _impl_.njst100_;
}
inline uint32_t SongDifficultyProto::njst100() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongDifficultyProto.njsT100)
  return _internal_njst100();
}
inline void SongDifficultyProto::_internal_set_njst100(uint32_t value) {
  
  _impl_.njst100_ = value;
}
inline void SongDifficultyProto::set_njst100(uint32_t value) {
  _internal_set_njst100(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongDifficultyProto.njsT100)
}

// uint32 bombs = 7;
inline void SongDifficultyProto::clear_bombs() {
  _impl_.bombs_ = 0u;
}
inline uint32_t SongDifficultyProto::_internal_bombs() const {
  return _impl_.bombs_;
}
inline uint32_t SongDifficultyProto::bombs() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongDifficultyProto.bombs)
  return _internal_bombs();
}
inline void SongDifficultyProto::_internal_set_bombs(uint32_t value) {
  
  _impl_.bombs_ = value;
}
inline void SongDifficultyProto::set_bombs(uint32_t value) {
  _internal_set_bombs(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongDifficultyProto.bombs)
}

// uint32 notes = 8;
inline void SongDifficultyProto::clear_notes() {
  _impl_.notes_ = 0u;
}
inline uint32_t SongDifficultyProto::_internal_notes() const {
  return _impl_.notes_;
}
inline uint32_t SongDifficultyProto::notes() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongDifficultyProto.notes)
  return _internal_notes();
}
inline void SongDifficultyProto::_internal_set_notes(uint32_t value) {
  
  _impl_.notes_ = value;
}
inline void SongDifficultyProto::set_notes(uint32_t value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongDifficultyProto.notes)
}

// uint32 obstacles = 9;
inline void SongDifficultyProto::clear_obstacles() {
  _impl_.obstacles_ = 0u;
}
inline uint32_t SongDifficultyProto::_internal_obstacles() const {
  return _impl_.obstacles_;
}
inline uint32_t SongDifficultyProto::obstacles() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongDifficultyProto.obstacles)
  return _internal_obstacles();
}
inline void SongDifficultyProto::_internal_set_obstacles(uint32_t value) {
  
  _impl_.obstacles_ = value;
}
inline void SongDifficultyProto::set_obstacles(uint32_t value) {
  _internal_set_obstacles(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongDifficultyProto.obstacles)
}

// optional uint32 mods = 10;
inline bool SongDifficultyProto::_internal_has_mods() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SongDifficultyProto::has_mods() const {
  return _internal_has_mods();
}
inline void SongDifficultyProto::clear_mods() {
  _impl_.mods_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SongDifficultyProto::_internal_mods() const {
  return _impl_.mods_;
}
inline uint32_t SongDifficultyProto::mods() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongDifficultyProto.mods)
  return _internal_mods();
}
inline void SongDifficultyProto::_internal_set_mods(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mods_ = value;
}
inline void SongDifficultyProto::set_mods(uint32_t value) {
  _internal_set_mods(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongDifficultyProto.mods)
}

// -------------------------------------------------------------------

// SongProto

// float bpm = 1;
inline void SongProto::clear_bpm() {
  _impl_.bpm_ = 0;
}
inline float SongProto::_internal_bpm() const {
  return _impl_.bpm_;
}
inline float SongProto::bpm() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.bpm)
  return _internal_bpm();
}
inline void SongProto::_internal_set_bpm(float value) {
  
  _impl_.bpm_ = value;
}
inline void SongProto::set_bpm(float value) {
  _internal_set_bpm(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.bpm)
}

// uint32 downloadCount = 2;
inline void SongProto::clear_downloadcount() {
  _impl_.downloadcount_ = 0u;
}
inline uint32_t SongProto::_internal_downloadcount() const {
  return _impl_.downloadcount_;
}
inline uint32_t SongProto::downloadcount() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.downloadCount)
  return _internal_downloadcount();
}
inline void SongProto::_internal_set_downloadcount(uint32_t value) {
  
  _impl_.downloadcount_ = value;
}
inline void SongProto::set_downloadcount(uint32_t value) {
  _internal_set_downloadcount(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.downloadCount)
}

// uint32 upvotes = 3;
inline void SongProto::clear_upvotes() {
  _impl_.upvotes_ = 0u;
}
inline uint32_t SongProto::_internal_upvotes() const {
  return _impl_.upvotes_;
}
inline uint32_t SongProto::upvotes() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.upvotes)
  return _internal_upvotes();
}
inline void SongProto::_internal_set_upvotes(uint32_t value) {
  
  _impl_.upvotes_ = value;
}
inline void SongProto::set_upvotes(uint32_t value) {
  _internal_set_upvotes(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.upvotes)
}

// uint32 downvotes = 4;
inline void SongProto::clear_downvotes() {
  _impl_.downvotes_ = 0u;
}
inline uint32_t SongProto::_internal_downvotes() const {
  return _impl_.downvotes_;
}
inline uint32_t SongProto::downvotes() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.downvotes)
  return _internal_downvotes();
}
inline void SongProto::_internal_set_downvotes(uint32_t value) {
  
  _impl_.downvotes_ = value;
}
inline void SongProto::set_downvotes(uint32_t value) {
  _internal_set_downvotes(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.downvotes)
}

// uint32 uploadTimeUnix = 5;
inline void SongProto::clear_uploadtimeunix() {
  _impl_.uploadtimeunix_ = 0u;
}
inline uint32_t SongProto::_internal_uploadtimeunix() const {
  return _impl_.uploadtimeunix_;
}
inline uint32_t SongProto::uploadtimeunix() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.uploadTimeUnix)
  return _internal_uploadtimeunix();
}
inline void SongProto::_internal_set_uploadtimeunix(uint32_t value) {
  
  _impl_.uploadtimeunix_ = value;
}
inline void SongProto::set_uploadtimeunix(uint32_t value) {
  _internal_set_uploadtimeunix(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.uploadTimeUnix)
}

// uint32 rankedChangeUnix = 14;
inline void SongProto::clear_rankedchangeunix() {
  _impl_.rankedchangeunix_ = 0u;
}
inline uint32_t SongProto::_internal_rankedchangeunix() const {
  return _impl_.rankedchangeunix_;
}
inline uint32_t SongProto::rankedchangeunix() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.rankedChangeUnix)
  return _internal_rankedchangeunix();
}
inline void SongProto::_internal_set_rankedchangeunix(uint32_t value) {
  
  _impl_.rankedchangeunix_ = value;
}
inline void SongProto::set_rankedchangeunix(uint32_t value) {
  _internal_set_rankedchangeunix(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.rankedChangeUnix)
}

// uint32 mapId = 6;
inline void SongProto::clear_mapid() {
  _impl_.mapid_ = 0u;
}
inline uint32_t SongProto::_internal_mapid() const {
  return _impl_.mapid_;
}
inline uint32_t SongProto::mapid() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.mapId)
  return _internal_mapid();
}
inline void SongProto::_internal_set_mapid(uint32_t value) {
  
  _impl_.mapid_ = value;
}
inline void SongProto::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.mapId)
}

// uint32 songDurationSeconds = 8;
inline void SongProto::clear_songdurationseconds() {
  _impl_.songdurationseconds_ = 0u;
}
inline uint32_t SongProto::_internal_songdurationseconds() const {
  return _impl_.songdurationseconds_;
}
inline uint32_t SongProto::songdurationseconds() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.songDurationSeconds)
  return _internal_songdurationseconds();
}
inline void SongProto::_internal_set_songdurationseconds(uint32_t value) {
  
  _impl_.songdurationseconds_ = value;
}
inline void SongProto::set_songdurationseconds(uint32_t value) {
  _internal_set_songdurationseconds(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.songDurationSeconds)
}

// bytes hashBytes = 9;
inline void SongProto::clear_hashbytes() {
  _impl_.hashbytes_.ClearToEmpty();
}
inline const std::string& SongProto::hashbytes() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.hashBytes)
  return _internal_hashbytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SongProto::set_hashbytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hashbytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.hashBytes)
}
inline std::string* SongProto::mutable_hashbytes() {
  std::string* _s = _internal_mutable_hashbytes();
  // @@protoc_insertion_point(field_mutable:SongDetailsCache.Structs.SongProto.hashBytes)
  return _s;
}
inline const std::string& SongProto::_internal_hashbytes() const {
  return _impl_.hashbytes_.Get();
}
inline void SongProto::_internal_set_hashbytes(const std::string& value) {
  
  _impl_.hashbytes_.Set(value, GetArenaForAllocation());
}
inline std::string* SongProto::_internal_mutable_hashbytes() {
  
  return _impl_.hashbytes_.Mutable(GetArenaForAllocation());
}
inline std::string* SongProto::release_hashbytes() {
  // @@protoc_insertion_point(field_release:SongDetailsCache.Structs.SongProto.hashBytes)
  return _impl_.hashbytes_.Release();
}
inline void SongProto::set_allocated_hashbytes(std::string* hashbytes) {
  if (hashbytes != nullptr) {
    
  } else {
    
  }
  _impl_.hashbytes_.SetAllocated(hashbytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hashbytes_.IsDefault()) {
    _impl_.hashbytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SongDetailsCache.Structs.SongProto.hashBytes)
}

// string songName = 10;
inline void SongProto::clear_songname() {
  _impl_.songname_.ClearToEmpty();
}
inline const std::string& SongProto::songname() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.songName)
  return _internal_songname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SongProto::set_songname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.songname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.songName)
}
inline std::string* SongProto::mutable_songname() {
  std::string* _s = _internal_mutable_songname();
  // @@protoc_insertion_point(field_mutable:SongDetailsCache.Structs.SongProto.songName)
  return _s;
}
inline const std::string& SongProto::_internal_songname() const {
  return _impl_.songname_.Get();
}
inline void SongProto::_internal_set_songname(const std::string& value) {
  
  _impl_.songname_.Set(value, GetArenaForAllocation());
}
inline std::string* SongProto::_internal_mutable_songname() {
  
  return _impl_.songname_.Mutable(GetArenaForAllocation());
}
inline std::string* SongProto::release_songname() {
  // @@protoc_insertion_point(field_release:SongDetailsCache.Structs.SongProto.songName)
  return _impl_.songname_.Release();
}
inline void SongProto::set_allocated_songname(std::string* songname) {
  if (songname != nullptr) {
    
  } else {
    
  }
  _impl_.songname_.SetAllocated(songname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.songname_.IsDefault()) {
    _impl_.songname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SongDetailsCache.Structs.SongProto.songName)
}

// string songAuthorName = 11;
inline void SongProto::clear_songauthorname() {
  _impl_.songauthorname_.ClearToEmpty();
}
inline const std::string& SongProto::songauthorname() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.songAuthorName)
  return _internal_songauthorname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SongProto::set_songauthorname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.songauthorname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.songAuthorName)
}
inline std::string* SongProto::mutable_songauthorname() {
  std::string* _s = _internal_mutable_songauthorname();
  // @@protoc_insertion_point(field_mutable:SongDetailsCache.Structs.SongProto.songAuthorName)
  return _s;
}
inline const std::string& SongProto::_internal_songauthorname() const {
  return _impl_.songauthorname_.Get();
}
inline void SongProto::_internal_set_songauthorname(const std::string& value) {
  
  _impl_.songauthorname_.Set(value, GetArenaForAllocation());
}
inline std::string* SongProto::_internal_mutable_songauthorname() {
  
  return _impl_.songauthorname_.Mutable(GetArenaForAllocation());
}
inline std::string* SongProto::release_songauthorname() {
  // @@protoc_insertion_point(field_release:SongDetailsCache.Structs.SongProto.songAuthorName)
  return _impl_.songauthorname_.Release();
}
inline void SongProto::set_allocated_songauthorname(std::string* songauthorname) {
  if (songauthorname != nullptr) {
    
  } else {
    
  }
  _impl_.songauthorname_.SetAllocated(songauthorname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.songauthorname_.IsDefault()) {
    _impl_.songauthorname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SongDetailsCache.Structs.SongProto.songAuthorName)
}

// string levelAuthorName = 12;
inline void SongProto::clear_levelauthorname() {
  _impl_.levelauthorname_.ClearToEmpty();
}
inline const std::string& SongProto::levelauthorname() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.levelAuthorName)
  return _internal_levelauthorname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SongProto::set_levelauthorname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.levelauthorname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.levelAuthorName)
}
inline std::string* SongProto::mutable_levelauthorname() {
  std::string* _s = _internal_mutable_levelauthorname();
  // @@protoc_insertion_point(field_mutable:SongDetailsCache.Structs.SongProto.levelAuthorName)
  return _s;
}
inline const std::string& SongProto::_internal_levelauthorname() const {
  return _impl_.levelauthorname_.Get();
}
inline void SongProto::_internal_set_levelauthorname(const std::string& value) {
  
  _impl_.levelauthorname_.Set(value, GetArenaForAllocation());
}
inline std::string* SongProto::_internal_mutable_levelauthorname() {
  
  return _impl_.levelauthorname_.Mutable(GetArenaForAllocation());
}
inline std::string* SongProto::release_levelauthorname() {
  // @@protoc_insertion_point(field_release:SongDetailsCache.Structs.SongProto.levelAuthorName)
  return _impl_.levelauthorname_.Release();
}
inline void SongProto::set_allocated_levelauthorname(std::string* levelauthorname) {
  if (levelauthorname != nullptr) {
    
  } else {
    
  }
  _impl_.levelauthorname_.SetAllocated(levelauthorname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.levelauthorname_.IsDefault()) {
    _impl_.levelauthorname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SongDetailsCache.Structs.SongProto.levelAuthorName)
}

// uint32 rankedState = 15;
inline void SongProto::clear_rankedstate() {
  _impl_.rankedstate_ = 0u;
}
inline uint32_t SongProto::_internal_rankedstate() const {
  return _impl_.rankedstate_;
}
inline uint32_t SongProto::rankedstate() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.rankedState)
  return _internal_rankedstate();
}
inline void SongProto::_internal_set_rankedstate(uint32_t value) {
  
  _impl_.rankedstate_ = value;
}
inline void SongProto::set_rankedstate(uint32_t value) {
  _internal_set_rankedstate(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.rankedState)
}

// repeated .SongDetailsCache.Structs.SongDifficultyProto difficulties = 13;
inline int SongProto::_internal_difficulties_size() const {
  return _impl_.difficulties_.size();
}
inline int SongProto::difficulties_size() const {
  return _internal_difficulties_size();
}
inline void SongProto::clear_difficulties() {
  _impl_.difficulties_.Clear();
}
inline ::SongDetailsCache::Structs::SongDifficultyProto* SongProto::mutable_difficulties(int index) {
  // @@protoc_insertion_point(field_mutable:SongDetailsCache.Structs.SongProto.difficulties)
  return _impl_.difficulties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SongDetailsCache::Structs::SongDifficultyProto >*
SongProto::mutable_difficulties() {
  // @@protoc_insertion_point(field_mutable_list:SongDetailsCache.Structs.SongProto.difficulties)
  return &_impl_.difficulties_;
}
inline const ::SongDetailsCache::Structs::SongDifficultyProto& SongProto::_internal_difficulties(int index) const {
  return _impl_.difficulties_.Get(index);
}
inline const ::SongDetailsCache::Structs::SongDifficultyProto& SongProto::difficulties(int index) const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.difficulties)
  return _internal_difficulties(index);
}
inline ::SongDetailsCache::Structs::SongDifficultyProto* SongProto::_internal_add_difficulties() {
  return _impl_.difficulties_.Add();
}
inline ::SongDetailsCache::Structs::SongDifficultyProto* SongProto::add_difficulties() {
  ::SongDetailsCache::Structs::SongDifficultyProto* _add = _internal_add_difficulties();
  // @@protoc_insertion_point(field_add:SongDetailsCache.Structs.SongProto.difficulties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SongDetailsCache::Structs::SongDifficultyProto >&
SongProto::difficulties() const {
  // @@protoc_insertion_point(field_list:SongDetailsCache.Structs.SongProto.difficulties)
  return _impl_.difficulties_;
}

// string uploaderName = 16;
inline void SongProto::clear_uploadername() {
  _impl_.uploadername_.ClearToEmpty();
}
inline const std::string& SongProto::uploadername() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProto.uploaderName)
  return _internal_uploadername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SongProto::set_uploadername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uploadername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProto.uploaderName)
}
inline std::string* SongProto::mutable_uploadername() {
  std::string* _s = _internal_mutable_uploadername();
  // @@protoc_insertion_point(field_mutable:SongDetailsCache.Structs.SongProto.uploaderName)
  return _s;
}
inline const std::string& SongProto::_internal_uploadername() const {
  return _impl_.uploadername_.Get();
}
inline void SongProto::_internal_set_uploadername(const std::string& value) {
  
  _impl_.uploadername_.Set(value, GetArenaForAllocation());
}
inline std::string* SongProto::_internal_mutable_uploadername() {
  
  return _impl_.uploadername_.Mutable(GetArenaForAllocation());
}
inline std::string* SongProto::release_uploadername() {
  // @@protoc_insertion_point(field_release:SongDetailsCache.Structs.SongProto.uploaderName)
  return _impl_.uploadername_.Release();
}
inline void SongProto::set_allocated_uploadername(std::string* uploadername) {
  if (uploadername != nullptr) {
    
  } else {
    
  }
  _impl_.uploadername_.SetAllocated(uploadername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uploadername_.IsDefault()) {
    _impl_.uploadername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SongDetailsCache.Structs.SongProto.uploaderName)
}

// -------------------------------------------------------------------

// SongProtoContainer

// uint32 formatVersion = 1;
inline void SongProtoContainer::clear_formatversion() {
  _impl_.formatversion_ = 0u;
}
inline uint32_t SongProtoContainer::_internal_formatversion() const {
  return _impl_.formatversion_;
}
inline uint32_t SongProtoContainer::formatversion() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProtoContainer.formatVersion)
  return _internal_formatversion();
}
inline void SongProtoContainer::_internal_set_formatversion(uint32_t value) {
  
  _impl_.formatversion_ = value;
}
inline void SongProtoContainer::set_formatversion(uint32_t value) {
  _internal_set_formatversion(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProtoContainer.formatVersion)
}

// uint64 scrapeEndedTimeUnix = 2;
inline void SongProtoContainer::clear_scrapeendedtimeunix() {
  _impl_.scrapeendedtimeunix_ = uint64_t{0u};
}
inline uint64_t SongProtoContainer::_internal_scrapeendedtimeunix() const {
  return _impl_.scrapeendedtimeunix_;
}
inline uint64_t SongProtoContainer::scrapeendedtimeunix() const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProtoContainer.scrapeEndedTimeUnix)
  return _internal_scrapeendedtimeunix();
}
inline void SongProtoContainer::_internal_set_scrapeendedtimeunix(uint64_t value) {
  
  _impl_.scrapeendedtimeunix_ = value;
}
inline void SongProtoContainer::set_scrapeendedtimeunix(uint64_t value) {
  _internal_set_scrapeendedtimeunix(value);
  // @@protoc_insertion_point(field_set:SongDetailsCache.Structs.SongProtoContainer.scrapeEndedTimeUnix)
}

// repeated .SongDetailsCache.Structs.SongProto songs = 4;
inline int SongProtoContainer::_internal_songs_size() const {
  return _impl_.songs_.size();
}
inline int SongProtoContainer::songs_size() const {
  return _internal_songs_size();
}
inline void SongProtoContainer::clear_songs() {
  _impl_.songs_.Clear();
}
inline ::SongDetailsCache::Structs::SongProto* SongProtoContainer::mutable_songs(int index) {
  // @@protoc_insertion_point(field_mutable:SongDetailsCache.Structs.SongProtoContainer.songs)
  return _impl_.songs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SongDetailsCache::Structs::SongProto >*
SongProtoContainer::mutable_songs() {
  // @@protoc_insertion_point(field_mutable_list:SongDetailsCache.Structs.SongProtoContainer.songs)
  return &_impl_.songs_;
}
inline const ::SongDetailsCache::Structs::SongProto& SongProtoContainer::_internal_songs(int index) const {
  return _impl_.songs_.Get(index);
}
inline const ::SongDetailsCache::Structs::SongProto& SongProtoContainer::songs(int index) const {
  // @@protoc_insertion_point(field_get:SongDetailsCache.Structs.SongProtoContainer.songs)
  return _internal_songs(index);
}
inline ::SongDetailsCache::Structs::SongProto* SongProtoContainer::_internal_add_songs() {
  return _impl_.songs_.Add();
}
inline ::SongDetailsCache::Structs::SongProto* SongProtoContainer::add_songs() {
  ::SongDetailsCache::Structs::SongProto* _add = _internal_add_songs();
  // @@protoc_insertion_point(field_add:SongDetailsCache.Structs.SongProtoContainer.songs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SongDetailsCache::Structs::SongProto >&
SongProtoContainer::songs() const {
  // @@protoc_insertion_point(field_list:SongDetailsCache.Structs.SongProtoContainer.songs)
  return _impl_.songs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Structs
}  // namespace SongDetailsCache

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SongProto_2eproto
